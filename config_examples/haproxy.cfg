global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# Default ciphers to use on SSL-enabled listening sockets.
	# For more information, see ciphers(1SSL). This list is from:
	#  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
	# An alternative list with additional directives can be obtained from
	#  https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy
	ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
	ssl-default-bind-options no-sslv3

defaults
	log	global
	mode	tcp
	option	tcplog
	option	dontlognull
        timeout connect 5000
        timeout client  600000
        timeout server  600000
        timeout tunnel  0
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

frontend tls-fe
    bind *:443 ssl crt /etc/haproxy/server.combined.pem ca-file /etc/haproxy/ca.pem verify optional tfo
    tcp-request inspect-delay 600s
    acl auth ssl_fc_has_crt
    acl pp1 payload(0,6) -m bin 50524f585920
    acl pp2 payload(0,12) -m bin 0d0a0d0a000d0a515549540a
    acl socks4 payload(0,1) -m bin 04
    acl socks5 payload(0,1) -m bin 05
    tcp-request content accept if !auth
    tcp-request content accept if socks4 or socks5
    tcp-request content accept if pp1 or pp2
    tcp-request content accept if HTTP 
    tcp-request content reject if !pp1 !pp2 !socks4 !socks5 !HTTP REQ_CONTENT
    use_backend socks-proxy if socks4 auth or socks5 auth
    use_backend strip-proxy if pp1 auth or pp2 auth
    default_backend http-decoy

backend http-decoy
    server decoy 127.0.0.1:41719

frontend http-decoy
    bind 127.0.0.1:41719
    mode http
    http-request deny deny_status 400

backend strip-proxy
    server strip-proxy 127.0.0.1:41718

frontend strip-proxy
    bind 127.0.0.1:41718 accept-proxy
    default_backend passthrough

backend socks-proxy
    server localsocks 127.0.0.1:1080

backend passthrough
    server direct *
